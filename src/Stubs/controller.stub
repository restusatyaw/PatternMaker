<?php

namespace {{namespace}};

use App\Services\{{name}}Service;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Log;
use Illuminate\Routing\Controllers\HasMiddleware;
use Illuminate\Routing\Controllers\Middleware;


use Exception;

class {{name}}Controller extends Controller implements HasMiddleware
{
    protected ${{name}}Service;

    public static function middleware(): array
    {
        return [
            new Middleware('auth:web'), // ðŸ”¹ use type guard this, if u wanna use this for api , use auth:api, otherwise auth:web
            new Middleware('permission:{{name}}.index', only: ['index', 'show', 'getDatatable']),
            new Middleware('permission:{{name}}.create', only: ['store']),
            new Middleware('permission:{{name}}.update', only: ['edit', 'update']),
            new Middleware('permission:{{name}}.delete', only: ['destroy']),
        ];
    }

    public function __construct({{name}}Service ${{name}}Service)
    {
        $this->{{name}}Service = ${{name}}Service;
    }

    public function index()
    {
        try {
            return view('{{name}}.form', [
                'page_title' => '{{name}}',
            ]);
        } catch (Exception $e) {
            Log::error("Error fetching all {{name}}: " . $e->getMessage());
            return self::error('Failed to fetch data');
        }
    }

    public function getData(Request $request)
    {
        try {
            $filters = $request->all();
            $data = $this->{{name}}Service->datatables($filters);
        } catch (Exception $e) {
            Log::error("Error fetching paginated {{name}} data: " . $e->getMessage());
        }
    }

    public function show($id)
    {
        try {
            $data = $this->{{name}}Service->findById($id);

            if (!$data) {
                return self::error('{{name}} not found');
            }

            return view('{{name}}.show', compact('data'));
        } catch (Exception $e) {
            Log::error("Error finding {{name}} with ID {$id}: " . $e->getMessage());
            return self::error('Error retrieving data');
        }
    }

    public function create()
    {
        $data = null;
        return view('{{name}}.form', [
            'page_title' => 'Create Data {{name}}',
            'data' => $data
        ]);
    }

    public function store(Request $request)
    {
        try {
            $data = $this->{{name}}Service->store($request->all());

            if (!$data) {
                return self::error('Failed to create {{name}}');
            }

            return self::success('Created successfully', '{{name}}.index');
        } catch (Exception $e) {
            Log::error("Error creating {{name}}: " . $e->getMessage());
            return self::error('Creation failed');
        }
    }

    public function edit($id)
    {
        try {
            $data = $this->{{name}}Service->findById($id);

            if (!$data) {
                return self::error('{{name}} not found');
            }

            return view('{{name}}.form', [
                'page_title' => 'Edit Data {{name}}',
                'data' => $data
            ]);
        } catch (Exception $e) {
            Log::error("Error finding {{name}} with ID {$id}: " . $e->getMessage());
            return self::error('Error retrieving data');
        }
    }

    public function update(Request $request, $id)
    {
        try {
            $data = $this->{{name}}Service->update($id, $request->all());

            if (!$data) {
                return self::error('{{name}} not found or update failed');
            }

            return self::success('Updated successfully', '{{name}}.index');
        } catch (Exception $e) {
            Log::error("Error updating {{name}} with ID {$id}: " . $e->getMessage());
            return self::error('Update failed');
        }
    }

    public function destroy($id)
    {
        try { 
            $deleted = $this->{{name}}Service->destroy($id);

            if (!$deleted) {
                return self::error('{{name}} not found or delete failed');
            }

            return self::responseJson(200, true, 'Success delete data', null);
        } catch (Exception $e) {
            Log::error("Error deleting {{name}} with ID {$id}: " . $e->getMessage());
            return self::responseJson(500, false, 'Failed fetch data', null);
        }
    }
}
